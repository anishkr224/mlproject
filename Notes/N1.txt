Lec: 266

In Anaconda prompt:

(base) C:\Users\anish>D:

(base) D:\>cd D:\mlproject

(base) D:\mlproject>code .

In VS Code:

1. Create a Conda Environment & Activate the Environment
conda create -p  venv python==3.8 -y
conda activate venv/

2. Clone this entire repository, and ensure it (my working directory) is synchronized with GitHub to allow committing all our code.

i. git init

(D:\mlproject\venv) D:\mlproject>git init
Initialized empty Git repository in D:/mlproject/.git/

ii. Create a README.md file (manually) then:

(D:\mlproject\venv) D:\mlproject>git add README.md

iii.

(D:\mlproject\venv) D:\mlproject>git commit -m "first commit"
Author identity unknown

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'anish@anishkr224.(none)')

Sol- Git Configuration: 

Set Globally (Recommended if this is your personal machine):
git config --global user.name "Anish Kumar"
git config --global user.email "anishkumar3967@gmail.com"

Or, Set Locally (Only for this repo):
git config user.name "Anish Kumar"
git config user.email "anishkumar3967@gmail.com"

(D:\mlproject\venv) D:\mlproject>git config user.name "Anish Kumar"

(D:\mlproject\venv) D:\mlproject>git config user.email "anishkumar3967@gmail.com"

(D:\mlproject\venv) D:\mlproject>git commit -m "first commit"      
[master (root-commit) c441663] first commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.md

To check status:
(D:\mlproject\venv) D:\mlproject>git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        venv/

nothing added to commit but untracked files present (use "git add" to track)

iv. 

(D:\mlproject\venv) D:\mlproject>git branch -M main

(D:\mlproject\venv) D:\mlproject>git remote add origin git@github.com:anishkr224/mlproject.git

To check your local repo is connected to your GitHub repo via SSH:

(D:\mlproject\venv) D:\mlproject>git remote -v
origin  git@github.com:anishkr224/mlproject.git (fetch)
origin  git@github.com:anishkr224/mlproject.git (push)

(D:\mlproject\venv) D:\mlproject>git push -u origin main
The authenticity of host 'github.com (20.207.73.82)' can't be established.
ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

Sol- Check Git Bash screenshot.

(D:\mlproject\venv) D:\mlproject>git push -u origin main
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 214 bytes | 107.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To github.com:anishkr224/mlproject.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

3. Add a .gitignore file at "https://github.com/anishkr224/mlproject" choose .gitignore template as python and commit changes, and then in order to make sure that everything is updated on my working directory:

(D:\mlproject\venv) D:\mlproject>git pull
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
Unpacking objects: 100% (3/3), 2.69 KiB | 8.00 KiB/s, done.
From github.com:anishkr224/mlproject
   c441663..9215bc3  main       -> origin/main
Updating c441663..9215bc3
Fast-forward
 .gitignore | 194 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 194 insertions(+)
 create mode 100644 .gitignore

4. Create setup.py & requirements.txt file

setup.py is used to package your machine learning application, making it installable and reusable in other projects. With setup.py, you can even upload the package to PyPI, allowing anyone to install and use it via pip.

Now this setup.py file, how it will be able to find out how many packages are in my working directory, for this: 
So if you want, the source folder "src" to be found as a package. In src folder we'll create __init__.py file
src -> __init__.py
when find_packages() runs in setup.py, it looks for all folders containing an __init__.py file. These folders are then recognized as packages and included in the distribution. This helps structure the source code as a package.

When you create any new folder in your project, you should also add an __init__.py file inside it. This ensures that the folder is treated as a package and gets included when the project is built using setup.py.

Instead of installing setup.py directly, you can trigger it while installing dependencies from requirements.txt by adding "-e ."
This ensures setup.py runs and builds the package in editable mode.

In the get_requirements() function (used to read requirements.txt), the -e . line might be read into the list of requirements. However, -e . should not be included in the list of packages passed to install_requires in setup.py. Itâ€™s only meant to trigger setup.py during installation, not to be treated as a dependency itself when running the code.

(D:\mlproject\venv) D:\mlproject>pip install -r requirements.txt
Obtaining file:///D:/mlproject (from -r requirements.txt (line 4))
  Preparing metadata (setup.py) ... done
Requirement already satisfied: pandas in d:\mlproject\venv\lib\site-packages (from -r requirements.txt (line 1)) (2.0.3)
Requirement already satisfied: numpy in d:\mlproject\venv\lib\site-packages (from -r requirements.txt (line 2)) (1.24.4)
Requirement already satisfied: seaborn in d:\mlproject\venv\lib\site-packages (from -r requirements.txt (line 3)) (0.13.2)
Requirement already satisfied: python-dateutil>=2.8.2 in d:\mlproject\venv\lib\site-packages (from pandas->-r requirements.txt (line 1)) (2.9.0.post0)
Requirement already satisfied: pytz>=2020.1 in d:\mlproject\venv\lib\site-packages (from pandas->-r requirements.txt (line 1)) (2025.2)
Requirement already satisfied: tzdata>=2022.1 in d:\mlproject\venv\lib\site-packages (from pandas->-r requirements.txt (line 1)) (2025.2)
Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in d:\mlproject\venv\lib\site-packages (from seaborn->-r requirements.txt (line 3)) (3.7.5)
Requirement already satisfied: contourpy>=1.0.1 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (1.1.1)
Requirement already satisfied: cycler>=0.10 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (4.57.0)
Requirement already satisfied: kiwisolver>=1.0.1 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (1.4.7)
Requirement already satisfied: packaging>=20.0 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (25.0)
Requirement already satisfied: pillow>=6.2.0 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (10.4.0)
Requirement already satisfied: pyparsing>=2.3.1 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (3.1.4)
Requirement already satisfied: importlib-resources>=3.2.0 in d:\mlproject\venv\lib\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (6.4.5)
Requirement already satisfied: six>=1.5 in d:\mlproject\venv\lib\site-packages (from python-dateutil>=2.8.2->pandas->-r requirements.txt (line 1)) (1.17.0)     
Requirement already satisfied: zipp>=3.1.0 in d:\mlproject\venv\lib\site-packages (from importlib-resources>=3.2.0->matplotlib!=3.6.1,>=3.4->seaborn->-r requirements.txt (line 3)) (3.20.2)
Installing collected packages: mlproject
  DEPRECATION: Legacy editable install of mlproject==0.0.1 from file:///D:/mlproject (from -r requirements.txt (line 4)) (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for mlproject
Successfully installed mlproject

When the mlproject.egg-info folder is generated, it indicates that your package is being installed. If you deploy it to PyPI, it becomes usable by others.

(D:\mlproject\venv) D:\mlproject>git add . 

(D:\mlproject\venv) D:\mlproject>git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   README.md
        new file:   requirements.txt
        new file:   setup.py
        new file:   src/__init__.py


(D:\mlproject\venv) D:\mlproject>git commit -m "setup"
[main 5059dfd] setup
 4 files changed, 32 insertions(+)
 create mode 100644 requirements.txt
 create mode 100644 setup.py
 create mode 100644 src/__init__.py

(D:\mlproject\venv) D:\mlproject>git push -u origin main
Enumerating objects: 8, done.
Counting objects: 100% (8/8), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (6/6), 853 bytes | 170.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To github.com:anishkr224/mlproject.git
   9215bc3..5059dfd  main -> main
branch 'main' set up to track 'origin/main'.
